`timescale 1ns / 1ps

module Instruction_memory(
    input   [5:0] A,
    output reg  [15:0] RD
);

reg [15:0] memory[0:45];

always@(*) begin
     memory[0] = 16'b1101000000000000;
     memory[1] = 16'b0101000000000001;
     memory[2] = 16'b1001000000000001;
     memory[3] = 16'b1101000100000010;
     memory[4] = 16'b0000000011010001;
     memory[5] = 16'b0010000000000011;
     memory[6] = 16'b0001000000000010;
     memory[7] = 16'b0011000000000111;
     memory[8] = 16'b1101000100000110;
     memory[9] = 16'b0000000000100001;
     memory[10] = 16'b1101000100000001;
     memory[11] = 16'b0000000000110001;
     memory[12] = 16'b0001000000000100;
     memory[13] = 16'b1000000000000001;
     memory[14] = 16'b0000000000010001;
     memory[15] = 16'b1101000100000001;
     memory[16] = 16'b1101000000000100;
     memory[17] = 16'b1000000001000001;
     memory[18] = 16'b1101000100001001;
     memory[19] = 16'b0000000011010001;
     memory[20] = 16'b1101000100000010;
     memory[21] = 16'b0000000010010001;
     memory[22] = 16'b1101000100001010;
     memory[23] = 16'b1101001000000000;
     memory[24] = 16'b0100000101000010;
     memory[25] = 16'b0100000000000010;
     memory[26] = 16'b1011000000001010;
     memory[27] = 16'b0000000010110001;
     memory[28] = 16'b1100000000001011;
     memory[29] = 16'b0000000000100000;
     memory[30] = 16'b1101000000000000;
     memory[31] = 16'b1101000100000001;
     memory[32] = 16'b1101001000000010;
     memory[33] = 16'b1101001100000011;
     memory[34] = 16'b1101010000000100;
     memory[35] = 16'b1101010100000101;
     memory[36] = 16'b1101011000000110;
     memory[37] = 16'b1101011100000111;
     memory[38] = 16'b1101100000001000;
     memory[39] = 16'b1101100100001001;
     memory[40] = 16'b1101000000001011;
     memory[41] = 16'b1101000000001100;
     memory[42] = 16'b1101000000001101;
     memory[43] = 16'b1101000000001110;
     memory[44] = 16'b1101000000001111;
    RD = memory[A];
end

//assign RD = memory[A];

endmodule